export const cardsTest = [
    {question: 'Что такое React?', answer: 'React это открытая (с открытым исходным кодом) JavaScript-библиотека для фронтенда, предназначенная для создания пользовательских интерфейсов, особенно, если речь идет о создании одностраничного приложения. Она отвечает за слой представления (view layout) в веб и мобильных приложениях. React был создан Jordan Walke, разработчиком программного обеспечения из Facebook. React был представлен на Facebook News Feed в 2011 году, а для Instagram - в 2012 году.'},
    {question: 'Назовите основные особенности React', answer: 'Основными особенностями React является следующее:\n' +
            '\n' +
            'Использование VirtualDOM (виртуальной объектной модели документа) вместо RealDOM (настоящий или реальный DOM), поскольку манипуляции с RealDOM являются дорогостоящими с точки зрения производительности\n' +
            'Поддержка рендеринга на стороне сервера (Server Side Rendering, SSR)\n' +
            'Следование принципу однонаправленного потока или связывания данных\n' +
            'Использование переиспользуемых/компонуемых компонентов пользовательского интерфейса (User Interface, UI) для формирования слоя представления'},
    {question: 'Что такое JSX?', answer: 'JSX (JavaScript и XML) - это XML-подобный синтаксис, расширяющий возможности ECMAScript. По сути, он является синтаксическим сахаром для функции React.createElement(), совмещая выразительность JavaScript с HTML-подобным синтаксисом разметки...'},
    {question: 'В чем разница между элементом и компонентом?', answer: 'Элемент - это обычный объект, описывающий, что мы хотим увидеть на экране в терминах узлов и других частей DOM. Элементы могут содержать другие элементы в своих свойствах. Создавать элементы в React легко. После создания, элемент не подлежит изменению.\n' +
            '\n' +
            'Объектное представление React-элемента выглядит так:...'},
    {question: 'Как в React создаются компоненты?', answer: 'Существует два способа это сделать:\n' +
            '\n' +
            'Функциональные компоненты: это простейший способ создания компонента. Эти функции являются "чистыми", принимают объект с пропами в качестве аргумента и возвращают элемент(ы):...'},
    {question: 'Когда лучше использовать классовый компонент, а когда функциональный?', answer: 'Если компонент нуждается в состоянии или методах жизненного цикла, тогда используйте классовый компонент, иначе, используйте функциональный компонент.\n' +
            '\n' +
            'Обратите внимание: в React 16.8 были представлены хуки, позволяющие использовать состояние, методы жизненного цикла и другие возможности классовых компонентов в функциях.'},
    {question: 'Что такое "чистые" компоненты (Pure Components)?', answer: 'React.PureComponent - это тоже самое, что React.Component, за исключением автоматической обработки метода shouldComponentUpdate(). При измнении пропов или состояния PureComponent автоматически выполнит их поверхностное сравнение. С другой стороны, Component такого сравнения по умолчанию не проводит. Поэтому компонент будет повторно рендерится до тех пор, пока не будет вызван метод shouldComponentUpdate().'},
    {question: 'Что такое состояние (state) в React?', answer: 'Состояние - это объект, содержащий некоторую информацию, которая может измениться в течение жизненного цикла компонента. Мы всегда должны стараться делать состояние настолько простым, насколько это возможно, и минимизировать количество компонентов без состояния.\n' +
            '\n' +
            'Создадим компонент User с состоянием message:\n' +
            '\n'},
]